'\"
'\" Copyright (C) 2024 Mariusz ≈Åapkowski
'\"
'\" Licensed under the Apache License, Version 2.0 (the "License");
'\" you may not use this file except in compliance with the License.
'\" You may obtain a copy of the License at
'\"
'\"     http://www.apache.org/licenses/LICENSE-2.0
'\"
'\" Unless required by applicable law or agreed to in writing, software
'\" distributed under the License is distributed on an "AS IS" BASIS,
'\" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'\" See the License for the specific language governing permissions and
'\" limitations under the License.
'\"

.TH result 3
.SH NAME
.B result
- A library providing better error handling in C, v0.1.0
.SH SYPNOSIS
.B #include <result/result.h>
.SH DISCLAIMER
Result is a library in beta development stage. Its API can change before the 1.0 release.
.SH DESCRIPTION
.B Result
provides a special wrapper for return types that prohibits retriving values without checking for errors while making the handling of those errors easier.
.PP
.B Result 
is designed to be a direct replacement to the libc
.I errno
variable, providing tools to easly convert between the two.

.SH USING RESULT IN FUNCTION DECLARATIONS
To return Results in your function, first you need to declare a result for your type (Results for all libc types are already defined.)
.PP
.B  \tRESULT_DEFINE(yourtype_t)
.PP
.I Note:
All pointer types (like char*) or types with spaces (like long int) require type redefinition:
.PP
    \fBtypedef long int long_int;\fP
    \fBRESULT_DEFINE(long_int)\fP
.PP
    \fBtypedef char* char_ptr;\fP
    \fBRESULT_DEFINE(char_ptr)\fP
.PP
Declare a function with a Result return type by using the \fBResult\fP(type) macro:
.PP
    \fBResult(int) myfunction(int argument);\fP
.PP
Return an OK result with the \fBresult_OK\fP(type[, value]) macro, return an error result with the \fBresult_ERR\fP(type, error) macro:
.PP
    \fBResult(int) myfunction(int argument)\fP
    \fB{\fP
    \fB     if (argument == 0) return result_ERR(int, MyError);\fP
    \fB     return result_OK(argument + 2);\fP
    \fB}\fP
.PP
For defining custom error messages refer to the
.B ERRORS
section.
.SH USING RESULT FOR ERROR HANDLING
To get the return value from a function and abort on error use \fBunwrap\fP(type, result):
.PP
    \fBint myvalue = unwrap(int, myfunction(3));\fP
.PP
To get the error from a function and abort on an ok result use \fBunwrap_err\fP(type, result):
.PP
    \fBconst Error* error = unwrap_err(int, myfunction(0));\fP
.PP
To print a custom error message on abort use \fBexpect\fP(type, result, message):
.PP
    \fBint myvalue = expect(int, myfunction(3), "Unable to retrieve value from myfunction.");\fP
.PP
For more error handling methods refer to the 
.B RESULT METHODS
section.
.SH UNRECOVERABLE ERRORS
For unrecoverable errors and result on-error exits \fBpanicf\fP(code, str, ...) is used:
.PP
    \fBif (error == true) panic("DON'T PANIC");\fP
.PP
To define custom unrecoverable error behavior define a custom panic function:
.PP
    \fBvoid mypanic(RESULT_PANIC_FUNCTION_PARAMETERS)\fP
    \fB{\fP
    \fB     va_list arguments;\fP
    \fB     va_start(arguments, str);\fP
    
    \fB     printf("An error occurred!\n");\fP

    \fB     vprintf(str, arguments);\fP
    \fB     va_end(arguments);\fP

    \fB     exit(exit_code);\fP
    \fB}\fP

    \fB#define panic_function mypanic\fP
.PP
Variables provided by 
.B RESULT_PANIC_FUNCTION_PARAMETERS
:
.RS
.IP src_line
The line from which the panic was called
.IP src_function
the function from which the panic was called
.IP src_file
the file from which the panic was called
.IP exit_code
Prefered program exit code
.IP message
Panic message with printf-like formatting
.IP ...\ (va_list)
Panic message format specifier replacements
.RE

.SH ERRORS
Result refers to errors by constant Error type pointers (const Error*)
To get a result type by an id use the \fBERR\fP(id) macro:
.PP
    \fBconst Error* myerror = ERR(MyError);\fP
.PP
You can compare errors normally using the == operator.
.PP
    \fBif (myerror == ERR(MyError)) printf("Oh no!");\fP
.PP
Define custom errors with the \fBERROR_DEFINE\fP(id, exit_code, message) macro:
.PP
    \fBERROR_DEFINE(MyError, -1, "Something bad happened!")\fP

.SH RESULT METHODS
.RS
.IP \fBresult_and\fP(type,\ self,\ other)
Returns \fIother\fP if the result is OK, otherwise returns the Err value of \fIself\fP.
    - type is the result type.
    - self is the result that the method is called on.
    - other is a result, that has the same type as self.
.IP \fBresult_and_then\fP(type,\ self,\ call)
Calls \fIcall\fP if the result is OK, otherrwise returns the ERR value of \fIself\fP.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns a result, that has the same type as self, and takes nothing.
.IP \fBresult_expect\fP(type,\ self,\ error)
Call \fBpanicf\fP when \fIself\fP is ERR with the provided error message (\fIerror\fP), otherwise return the OK value.
    - type is the result type.
    - self is the result that the method is called on.
    - error is a provided error message, when \fBexpect\fP panics.
.IP \fBresult_expect_err\fP(type,\ self,\ error)
The same as \fBresult_expect\fP, but it panics on an OK value, and returns the ERR value.
    - type is the result type.
    - self is the result that the method is called on.
    - error is a provided error message, when \fBexpect_err\fP panics.
.IP \fBresult_inspect\fP(type,\ self,\ call)
When \fIself\fP is OK it calls \fIcall\fP with the OK value, otherwise does nothing.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns nothing, and takes the OK value.
.IP \fBresult_inspect_err\fP(type,\ self,\ call)
The same as \fBresult_inspect\fP, but calls the method when \fIself\fP is ERR, and provides the error to the call.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns nothing, and takes the ERR value.
.IP \fBresult_is_ok_and\fP(type,\ self,\ call)
Similar to \fBresult_inspect\fP, but \fIcall\fP returns a boolean, and the function returns true when \fIself\fP is OK, and call returns true. Otherwise returns false.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns a boolean, and takes the OK value.
.IP \fBresult_is_err_and\fP(type,\ self,\ call)
Similar to \fBresult_inspect_err\fP, but \fIcall\fP returns a boolean, and the function returns true when \fIself\fP is ERR, and call returns true. Otherwise returns false.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns a boolean, and takes the ERR value.
.IP \fBresult_unwrap\fP(type,\ self)
Call \fBpanicf\fP when \fIself\fP is ERR, otherwise return the OK value.
    - type is the result type.
    - self is the result that the method is called on.
.IP \fBresult_unwrap_err\fP(type,\ self)
The same as \fBresult_unwarp\fP, but it calls \fBpanicf\fP on OK and returns on ERR.
    - type is the result type.
    - self is the result that the method is called on.
.IP \fBresult_unwrap_or\fP(type,\ self,\ fallback)
The same as \fBresult_unwrap\fP, but it returns \fIfallback\fP on ERR and returns the value of \fIself\fP on OK.
    - type is the result type.
    - self is the result that the method is called on.
    - fallback is the fallback OK value.
.IP \fBresult_unwrap_or_err\fP(type,\ self,\ fallback)
The same as \fBresult_unwarp_or\fP, but it returns \fIfallback\fP on OK.
    - type is the result type.
    - self is the result that the method is called on.
    - fallback is the fallback ERR value.
.IP \fBresult_or\fP(type,\ self,\ other)
Returns \fIother\fP is the result is Err, otherwise returns the OK value of self.
    - type is the result type.
    - self is the result that the method is called on.
    - other is a result, that has the same type as self.
.IP \fBresult_or_else\fP(type,\ self,\ call)
Calls \fIcall\fP if the result is ERR, otherwise returns the OK value of \fIself\fP.
    - type is the result type.
    - self is the result that the method is called on.
    - call is a function pointer that returns a result, that has the same type as self, and takes nothing.
.IP \fBresult_ERR\fP(type,\ id)
Constructs a result with an ERR value.
    - type is the result type.
    - id is the Error ID.
.IP \fBresult_OK\fP(type,\ value)
Constructs a result with an OK value.
    - type is the result type.
    - id is the OK value (don't pass the value with the void type)
.IP \fBresult_is_ok\fP(type,\ self)
Returns true if \fIself\fP has an OK value, otherwise returns false.
    - type is the result type.
    - self is the result that the method is called on.
.IP \fBresult_is_err\fP(type,\ self)
Returns false if \fIself\fP has an OK value, otherwise returns true.
    - type is the result type.
    - self is the result that the method is called on.
.RE

.SH SHORTCUTS
If \fBRESULT_DONT_DEFINE_SHORTCUTS\fP is not defined Result defines shortcuts for the following functions:
    - expect = result_expect
    - expect_err = result_expect_err
    - is_err_and = result_is_err_and
    - is_ok_and = result_is_ok_and
    - unwrap = result_unwrap
    - unwrap_err = result_unwrap_err
    - unwrap_or = result_unwrap_or
    - unwrap_err_or = result_unwrap_err_or
    - is_ok = result_is_ok
    - is_err = result_is_err

.SH PROVIDED ERROR IDS

.RS
.IP PermissionNotPermitted
An attempt was made to perform an operation that is reserved for higher privilage processes.
.IP FileDoesNotExist
No file or directory could be found in the path specified.
.IP ProcessNotFound
No process could be found corresponding to the PID specified.
.IP InterruptedSysCall
An asynchronous signal occured and prevented completion of the call.
.IP IOError
Some physical input or output error occured.
.IP DeviceNotFoundOrAddress
Attached device couldn't handle the request, was incorectly installed, or was not found.
.IP ArgumentListTooBig
The number of bytes used in the argument list exceeded the limit.
.IP ExecFormatError
An attempt was made to execute a file that does not contain an executable-specific format.
.IP BadFileDescriptor
A file descriptor is not pointing to an opened file, or cannot handle the request.
.IP NoChildProcesses
An attempt was made to manipulate a non-existing child process.
.IP ResourceDeadlockAvoided
An attempt was made to lock a system resource that would have resulted in a deadlock situation.
.IP NotEnoughMemory
This process requires more memory than is allowed by the hardware or by system-managed constraints.
.IP PermissionDenied
An attempt was made to access a file in a way forbidden by it's file access permissions.
.IP BadAddress
The system detected an invalid address in attempting to use an argument of a call.
.IP NotABlockDevice
An attempt was made to do a block operation on an non-block device or file.
.IP DeviceOrResourceBusy
An attempt was made to use a system resource which was used at a time in a conflicting way.
.IP FileExists
An attempt was made to create a file in a location used by another file.
.IP InvalidCrossDeviceLink
An attempt was made to create a hard link across file systems.
.IP UnsupportedDeviceOperation
An attempt was made to apply an inappropriate function to a device.
.IP NotADirectory
An attempt was made to apply a directory-expecting function to a non-directory path.
.IP IsADirectory
An attempt was made to apply an inappropriate function to a directory.
.IP InvalidArgument
An invalid argument was supplied to a function.
.IP TooManyOpenedFiles
The current process has too many files open and can't open any more.
.IP TooManyOpenedFilesInSystem
The operating system has too many files open and can't open any more.
.IP InappropriateIoctlForDevice
An attempt was made to apply an inappropriate control function operation on a file or a special device.
.IP TextSegmentBusy
An attempt was made to modify a file while it's beeing executed, or execute a file while it's beeing modified.
.IP FileTooLarge
The size of a file is larger than allowed by the system.
.IP NoSpaceLeftOnDevice
A write operation was attempted on a device that is full.
.IP IllegalSeek
A seek operation was attempted on a socket, pipe or FIFO.
.IP ReadOnlyFileSystem
An attempt was made to modify a file or directory was made on a filesystem that was read-only at the time.
.IP TooManyLinks
Maximum allowable hard links to a single file has been exceeded.
.IP BrokenPipe
A write on a pipe, socket of FIFO for which there is no process to read the data.
.IP DeviceNotFound
The wrong type of device was given to a function that expects a particular sort of device.
.IP NumericalArgumentOutOfDomain
A numerical input argument was ouside the defined domain of the mathematical function
.IP NumericalArgumentOutOfRange
A numerical result of the function was too large to fit in the avaiable space.
.IP ResourceUnavailable
The system lacks resources to complete the operation. This operation may succeed later, when system resources are freed.
.IP InProgress
A long operation was attempted at a non-blocking function. [If you (a user) see this error message, this is a programming error. Please report it to the program authors.]
.IP AlreadyInProgress
An operation was attempted on a non-blocking object that already had an operation in progress.
.IP SocketOperationOnNonSocket
An attempt was made to apply a socket-expecting function to a non-socket file.
.IP MessageTooLong
A message sent on a socket was larger than the internal message buffer or some other network limit.
.IP WrongProtocolForSocket
A protocol was specified that does not support the semantics of the socket type requested.
.IP ProtocolNotAvailable
A socket option was specified that does not make sense for the particular protocol being used in the socket.
.IP SocketTypeNotSupported
The support for the socket type has not been configured into the system or no implementation for it exists.
.IP NotSupported
The attempted operation is not supported for the type of object referenced.
.IP ProtocolFamilyNotSupported
The protocol family has not been configured into the system or no implementation for it exists.
.IP ProtocolNotSupported
The protocol has not been configured into the system or no implementation for it exists.
.IP AddressFamilyNotSupportedByProtocol
An address incompatible with the requested protocol was used.
.IP AddressAlreadyInUse
The requested socket address is already in use.
.IP CannotAssignRequestedAddress
The requested socket address is not available.
.IP NetworkIsDown
A socket operation encontered a dead network.
.IP NetworkIsUnreachable
A socket operation was attempted to an unreachable network.
.IP NetworkDroppedConnectionOnReset
The host you were connected to crashed and rebooted.
.IP SoftwareCausedConnectionAbort
A network connection was aborted locally.
.IP ConnectionResetByPeer
A network connection was closed for reasons outside the control of the local host.
.IP NoBufferSpaceAvailable
An operation was not performed because the system lacked sufficient buffer space or because a queue was full.
.IP SocketIsAlreadyConnected
A connect request was made on an already connected socket.
.IP SocketIsNotConnected
A request to send or receive data was disallowed because the socket was not connected and no address was supplied.
.IP CannotSendAfterSocketShutdown
A request to send data was disallowed because the socket had already been shut down.
.IP DestinationAddressRequired
A required address was omitted from an operation on a socket.
.IP TooManyReferences
A splice cannot be completed, because there are too many references.
.IP ConnectionTimedOut
A connect or send request failed because the connected party did not properly respond after a period of time.
.IP ConnectionRefused
No connection could be made because the target machine actively refused it.
.IP TooManyLevelsOfSymbolicLinks
Too many levels of symbolic links were encountered in looking up a file name.
.IP FileNameTooLong
FileName or host name exceeded the limit of characters
.IP HostIsDown
The remote host for a requested network connection is down.
.IP NoRouteToHost
The remote host for a requested connection is not reachable.
.IP DirectoryNotEmpty
An non-empty directory was supplied.
.IP TooManyProceses
The per-user limit on new processes was exceeded.
.IP TooManyUsers
The new user limit was exceeded.
.IP DiskQuotaExceeded
The user's quota of disk blocks was exhaused.
.IP StaleNFSFileHandle
An attempt was made to access an open file (on an NFS filesystem) which is now unavailable.
.IP NFSObjectIsRemote
An attempt was made to NFS-mount a remote file system with a file name that already specifies an NFS-mounted file.
.IP RPCStructIsBad
Exchange of RPC information was unseccessful.
.IP RPCVersionWrong
The version of RPC on the remote peer is not compatible with the local version.
.IP RPCProgramNotAvailable
The requested program is not registered on the remote host.
.IP RPCProgramVersionWrong
The requested version of the program is not available on the remote host (RPC).
.IP BadRPCProcedureForProgram
An RPC call was attempted for a procedure which doesn't exist in the remote program.
.IP NoLocksAvailable
Attempted a system call that is not available on this system.") /* Whoa 
.IP InappropriateFileTypeOrFormat
The file was the wrong type for the operation, or a data file had the wrong format.
.IP AuthenticationError
Attempted to use an invalid authentication ticket to mount an NFS file system.
.IP NeedAuthenticator
An authentication ticket must be obtained before the given NFS file system may be mounted.
.IP FunctionNotImplemented
The function called is not implemented at all, or not available in the system.
.IP CannotExecASharedLibrary
An attempt was made to execute a shared library.
.IP WrongOrIncompleteMultibyteOrWideChar
While decoding a multibyte character the function came along an invalid or an incomplete sequence of bytes or the given wide characted is invalid.
.IP InappropriateOperationForBgProcess
An inappropriate operation was attempted in a background process.
.IP TranslatorDied
A translator program died while starting up.
.IP BadMessage
The message to be received is inappropriate for the operation being attempted.
.IP IdentifierRemoved
An IPC identiffier was removed while the current process was waiting on it.
.IP MultihopAttempted
Components of path require hopping to multiple remorte machines and the filesystem does not allow it.
.IP NoDataAvailable
No message is available.
.IP LinkHasBeenServed
The link connection to a remote machine is gone.
.IP NoMessageOfDesiredType
No message of desired type could be found.
.IP OutOfStreamsResources
The buffer could not be allocated due to insufficient STREAMs memory resources.
.IP NotAStream
A STREAM is not associeted with the specified file descriptor.
.IP ValueTooLarge
A numerical result of a function was too large to be stored in the caller provided space.
.IP ProtocolError
Some protocol error occured (This error is device-specyfic, but is generaly not related to hardware faliure. For more information refer to the manufacturer's manual.
.IP TimerExpired
A timer set for an I/O operation expired.
.IP OperationCanceled
An ansychronous operation was canceled before it was completed.
.IP OwnerDied
The last owner of a robust mutex died while holding it.
.IP MutexStateNotRecoverable
The last owner of a robust mutex died while holding it, and the new owner had unlocked the mutex without making it's state consistent.
.IP TruncatedString
A string copy or concatenation resulted in a truncated string.
.IP UnexpectedError
An error happend, but the error code passed is invalid.
.IP CodeAbuse
A function or API is being abused in a way which could only be detected at run-time
.IP BadCPUType
The executable in question does not support the current CPU
.IP MalformedExecutableOrSharedLibrary
The executable or shared library in question was malformed.
.IP MalformedMachObject
The Mach Object file in question was malformed.
.IP DeviceError
A device error has occured.
.IP NoSuchPolicy
No such policy registered.
.IP DevicePowerIsOff
The device power is off.
.IP FullInterfaceOutputQueue
Interface output queue is full.
.IP SharedLibraryVersionMismatch
The version of the shared library on the system does not match the version which was expected.
.IP IPSecProcessingFailure
IPsec subsystem error."
.IP NotPermittedInCapabilityMode
The system call or operation is not permitted for capability mode processes.
.IP IntegrityCheckFailed
An integrity check failed and detected inconsistencies in data questioned.
.IP CapabilitiesInsufficient
An operation requires greater privilege than the capability allows.
.IP InterruptedSyscallShouldBeRestarted
Interrupted system call should be restarted.
.IP ChannelNumberOutOfRange
Channel number out of range.
.IP Level2NotSynchronized
Level 2 not synchronized.
.IP Level3Halted
Level 3 halted.
.IP Level3Reset
Level 3 reset.
.IP LinkNumberOutOfRange
Link number out of range.
.IP ProtocolDriverNotAttached
Protocol driver not attached.
.IP NoCSIStructure
No CSI structure available.
.IP Level2Halted
Level 2 halted.
.IP InvalidExchange
Invalid exchange.
.IP InvalidRequestDescriptor
Invalid request descriptor.
.IP ExchangeFull
Exchange full.
.IP NoAnode
No anode.
.IP InvalidRequestCode
Invalid request code.
.IP InvalidSlot
Invalid slot.
.IP FileLockingDeadlock
File locking deadlock.
.IP BadFontFileFormat
Bad font file format.
.IP MachineIsNotOnTheNetwork
Machine is not on the network.
.IP PackageNotInstalled
Package not installed.
.IP AdvertiseError
Advertise error.
.IP SrmountError
Srmount error.
.IP CommunicationErrorOnSend
Communication error on send.
.IP RFSError
RFS specyfic error.
.IP NameNotUniqueOnNetwork
Name not unique on network.
.IP FileDescriptorInBadState
File descriptor in bad state.
.IP RemoteAddressChanged
Remote address changed.
.IP CannotAccessANeededSharedLibrary
Cannot access a needed shared library.
.IP AccessingACorruptedSharedLibrary
Accessing a corrupted shared library.
.IP DotLibSectionCorrupted
.lib section corrupted in a.out.
.IP TooManySharedLibraries
An attempt was made to link too many shared libraries.
.IP StreamsPipeError
STREAMs pipe error.
.IP StructureNeedsCleaning
Structure needs cleaning.
.IP NotXENIXNamedTypeFile
Not a XENIX named type file.
.IP NoXENIXSemaphoresAvailable
No XENIX Semaphores available.
.IP IsANamedTypeFile
Is a named type file.
.IP RemoteIOError
Remote I/O error.
.IP NoMediumFound
No medium found.
.IP WrongMediumType
Wrong medium type.
.IP RequiredKeyNotAvailable
Required key not available.
.IP KeyHasExpired
Key has expired.
.IP KeyHasBeenRevoked
Key has been revoked.
.IP KeyWasRejectedByService
Key was rejected by service.
.IP OperationPreventedByRFKILL
Operation not possible due to RF-kill.
.IP MemoryPageHasHardwareError
Memory page has hardware error.
.IP Async
Async
.IP UnknownError
Unknown error occured.
.RE

.SH AUTHORS
Mariusz ≈Åapkowski, based on the Rust's std::result::Result type.
